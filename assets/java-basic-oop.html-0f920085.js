const l=JSON.parse('{"key":"v-4e1bd42d","path":"/interview/java/java-basic-oop.html","title":"Java基础 - 面向对象","lang":"zh-CN","frontmatter":{"description":"解释下什么是面向对象 面向对象（Object Oriented，OO）是一种程序设计的思想和方法，强调将系统中的各个组成部分看作对象，通过对象之间的交互来完成系统功能。每个对象都是具有特定属性和行为的实体，可以封装数据和方法，继承其他对象的特性，以及与其他对象进行通信和协作。面向对象的程序设计将问题看作是由许多相互协作的对象所组成的，通过分析问题域中的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/hope/interview/java/java-basic-oop.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Java基础 - 面向对象"}],["meta",{"property":"og:description","content":"解释下什么是面向对象 面向对象（Object Oriented，OO）是一种程序设计的思想和方法，强调将系统中的各个组成部分看作对象，通过对象之间的交互来完成系统功能。每个对象都是具有特定属性和行为的实体，可以封装数据和方法，继承其他对象的特性，以及与其他对象进行通信和协作。面向对象的程序设计将问题看作是由许多相互协作的对象所组成的，通过分析问题域中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-10T15:49:54.000Z"}],["meta",{"property":"article:author","content":"DokiDoki"}],["meta",{"property":"article:modified_time","content":"2023-09-10T15:49:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础 - 面向对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-10T15:49:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DokiDoki\\",\\"url\\":\\"https://lengyue-ck.github.io/hope\\"}]}"]]},"headers":[{"level":2,"title":"解释下什么是面向对象","slug":"解释下什么是面向对象","link":"#解释下什么是面向对象","children":[]},{"level":2,"title":"面向对象和面向过程的区别","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":2,"title":"创建对象的几种方式","slug":"创建对象的几种方式","link":"#创建对象的几种方式","children":[]},{"level":2,"title":"类与对象的关系","slug":"类与对象的关系","link":"#类与对象的关系","children":[]},{"level":2,"title":"成员变量和局部变量的区别","slug":"成员变量和局部变量的区别","link":"#成员变量和局部变量的区别","children":[]},{"level":2,"title":"封装的好处","slug":"封装的好处","link":"#封装的好处","children":[]},{"level":2,"title":"构造函数在代码中的体现","slug":"构造函数在代码中的体现","link":"#构造函数在代码中的体现","children":[]},{"level":2,"title":"构造函数的细节","slug":"构造函数的细节","link":"#构造函数的细节","children":[]},{"level":2,"title":"构造函数与一般函数区别","slug":"构造函数与一般函数区别","link":"#构造函数与一般函数区别","children":[]},{"level":2,"title":"构造函数之前如何互相调用","slug":"构造函数之前如何互相调用","link":"#构造函数之前如何互相调用","children":[]},{"level":2,"title":"this到底代表什么","slug":"this到底代表什么","link":"#this到底代表什么","children":[]},{"level":2,"title":"什么时候定义静态方法","slug":"什么时候定义静态方法","link":"#什么时候定义静态方法","children":[{"level":3,"title":"静态方法注意事项","slug":"静态方法注意事项","link":"#静态方法注意事项","children":[]}]},{"level":2,"title":"什么时候定义静态变量呢","slug":"什么时候定义静态变量呢","link":"#什么时候定义静态变量呢","children":[]},{"level":2,"title":"静态变量和成员变量的区别","slug":"静态变量和成员变量的区别","link":"#静态变量和成员变量的区别","children":[]},{"level":2,"title":"什么是构造代码块","slug":"什么是构造代码块","link":"#什么是构造代码块","children":[]},{"level":2,"title":"局部代码块的作用","slug":"局部代码块的作用","link":"#局部代码块的作用","children":[]},{"level":2,"title":"继承的好处","slug":"继承的好处","link":"#继承的好处","children":[]},{"level":2,"title":"什么时候定义继承","slug":"什么时候定义继承","link":"#什么时候定义继承","children":[]},{"level":2,"title":"在java中继承的体现","slug":"在java中继承的体现","link":"#在java中继承的体现","children":[]},{"level":2,"title":"重写的注意事项","slug":"重写的注意事项","link":"#重写的注意事项","children":[]},{"level":2,"title":"super 关键字的作用","slug":"super-关键字的作用","link":"#super-关键字的作用","children":[]},{"level":2,"title":"super和this区别","slug":"super和this区别","link":"#super和this区别","children":[]},{"level":2,"title":"子类构造函数实例化过程","slug":"子类构造函数实例化过程","link":"#子类构造函数实例化过程","children":[]},{"level":2,"title":"final关键字","slug":"final关键字","link":"#final关键字","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"什么时候会在程序中定义final常量呢？","slug":"什么时候会在程序中定义final常量呢","link":"#什么时候会在程序中定义final常量呢","children":[]}]},{"level":2,"title":"抽象类的特点","slug":"抽象类的特点","link":"#抽象类的特点","children":[]},{"level":2,"title":"抽象类和一般类的异同点","slug":"抽象类和一般类的异同点","link":"#抽象类和一般类的异同点","children":[{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]}]},{"level":2,"title":"抽象类是否可以不定义抽象方法","slug":"抽象类是否可以不定义抽象方法","link":"#抽象类是否可以不定义抽象方法","children":[]},{"level":2,"title":"抽象关键字abstract不可以和哪些关键字共存","slug":"抽象关键字abstract不可以和哪些关键字共存","link":"#抽象关键字abstract不可以和哪些关键字共存","children":[]},{"level":2,"title":"接口的特点","slug":"接口的特点","link":"#接口的特点","children":[]},{"level":2,"title":"接口和抽象类的区别","slug":"接口和抽象类的区别","link":"#接口和抽象类的区别","children":[]},{"level":2,"title":"重载和重写的区别","slug":"重载和重写的区别","link":"#重载和重写的区别","children":[]},{"level":2,"title":"如何理解没有抽象方法的抽象类","slug":"如何理解没有抽象方法的抽象类","link":"#如何理解没有抽象方法的抽象类","children":[]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":2,"title":"面向对象的特点","slug":"面向对象的特点","link":"#面向对象的特点","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态-1","link":"#多态-1","children":[]}]}],"git":{"createdTime":1694360994000,"updatedTime":1694360994000,"contributors":[{"name":"逆流而上","email":"1666888816@qq.com","commits":1}]},"readingTime":{"minutes":19.49,"words":5847},"filePathRelative":"interview/java/java-basic-oop.md","localizedDate":"2023年9月10日","autoDesc":true}');export{l as data};
